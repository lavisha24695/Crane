// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package helloworld

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2) }

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x8f, 0xda, 0x30,
	0x10, 0xc5, 0x1b, 0x89, 0x42, 0x18, 0xa0, 0xad, 0x7c, 0xa8, 0x50, 0x7b, 0xa9, 0x72, 0xa8, 0x38,
	0x45, 0xa8, 0xbd, 0xb6, 0x2a, 0x0d, 0x7f, 0xb2, 0x2b, 0x81, 0x36, 0x22, 0x48, 0x7b, 0xf6, 0xc2,
	0x08, 0x22, 0x4c, 0xec, 0xb5, 0x9d, 0x65, 0xfd, 0x7d, 0xf7, 0x83, 0xac, 0x12, 0x01, 0x9b, 0xc3,
	0x9e, 0x6c, 0x6e, 0x9e, 0xe4, 0xe5, 0x97, 0xf7, 0x66, 0x2c, 0x0d, 0x7c, 0xd9, 0x21, 0x63, 0xfc,
	0xc8, 0x25, 0xdb, 0x84, 0x42, 0x72, 0xcd, 0x09, 0xbc, 0x3d, 0x09, 0x02, 0xe8, 0xde, 0x94, 0xd5,
	0x12, 0x1f, 0x0b, 0x54, 0x9a, 0x10, 0x68, 0xe4, 0xf4, 0x80, 0x7d, 0xef, 0x87, 0x37, 0x68, 0x2f,
	0xab, 0x73, 0xf0, 0x13, 0xe0, 0xa4, 0x11, 0xcc, 0x90, 0x3e, 0xb4, 0x0e, 0xa8, 0x14, 0xdd, 0x9e,
	0x45, 0xe7, 0xf2, 0xd7, 0x4b, 0x07, 0x5a, 0xb1, 0x44, 0xd4, 0x28, 0xc9, 0x08, 0xfc, 0x94, 0x9a,
	0xea, 0x33, 0xd2, 0x0f, 0x6b, 0x16, 0xea, 0x7f, 0xfb, 0xf6, 0xf5, 0x9d, 0x37, 0x82, 0x99, 0xe0,
	0xc3, 0xd0, 0x23, 0xff, 0xa1, 0x9d, 0x52, 0xb3, 0x44, 0x81, 0x54, 0x3b, 0x21, 0x62, 0xae, 0x54,
	0x26, 0x2c, 0x11, 0x11, 0xf8, 0xb7, 0xb9, 0x96, 0x3c, 0x29, 0xac, 0x4c, 0x0c, 0xbc, 0xa1, 0x47,
	0x46, 0xd0, 0x4c, 0xa9, 0x71, 0x23, 0xf8, 0x73, 0xa4, 0x1b, 0x94, 0x73, 0x65, 0x99, 0xe3, 0x2f,
	0x7c, 0x5c, 0x98, 0x18, 0x1d, 0x3a, 0x39, 0x43, 0xbd, 0xde, 0xcd, 0x32, 0x86, 0x96, 0x88, 0x11,
	0xf8, 0x0b, 0x33, 0x41, 0x86, 0xda, 0x96, 0x30, 0x86, 0xce, 0x9c, 0xaf, 0x29, 0x73, 0x82, 0xfc,
	0x81, 0xc6, 0xc2, 0x58, 0xb7, 0xf1, 0x1f, 0xb4, 0x92, 0x42, 0x3b, 0x74, 0x61, 0x0a, 0xbd, 0x6a,
	0x0e, 0x4f, 0x28, 0x55, 0xc6, 0x73, 0x5b, 0x1f, 0x13, 0xe8, 0xae, 0xa8, 0xda, 0xdf, 0xe5, 0x98,
	0x0a, 0x5e, 0x68, 0x6b, 0x33, 0x9d, 0x13, 0x25, 0xe2, 0xcc, 0xfe, 0x76, 0x8e, 0x2f, 0x98, 0x34,
	0xcb, 0xf7, 0x6e, 0x89, 0x56, 0x47, 0x7e, 0x85, 0x44, 0xab, 0x23, 0xbf, 0x46, 0xa2, 0xd2, 0x8c,
	0x7d, 0xa2, 0x19, 0x7c, 0xaa, 0x20, 0x3b, 0x89, 0x4e, 0x53, 0x8a, 0xa1, 0x77, 0xe1, 0x38, 0xa5,
	0x9a, 0xd6, 0x40, 0xf6, 0xb9, 0xa2, 0x21, 0x7c, 0xcf, 0x78, 0xb8, 0x95, 0x62, 0x1d, 0xe2, 0x33,
	0x3d, 0x08, 0x86, 0xaa, 0xa6, 0x8e, 0x3e, 0x57, 0xf2, 0xfb, 0xf2, 0x9c, 0x94, 0xeb, 0x26, 0xf1,
	0x1e, 0x9a, 0xd5, 0xde, 0xf9, 0xfd, 0x1a, 0x00, 0x00, 0xff, 0xff, 0xea, 0x72, 0xbe, 0x72, 0x8b,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloClient, error)
	SayRepeat(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayRepeatClient, error)
	SayGossip(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayGossipClient, error)
	IntroPut(ctx context.Context, opts ...grpc.CallOption) (Greeter_IntroPutClient, error)
	SayPut(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayPutClient, error)
	LeaderLs(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_LeaderLsClient, error)
	MyGet(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyGetClient, error)
	FetchFile(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_FetchFileClient, error)
	MyDelete(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyDeleteClient, error)
	LocalDelete(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_LocalDeleteClient, error)
	MyLs(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyLsClient, error)
	PutFile(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_PutFileClient, error)
	MyGetversions(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyGetversionsClient, error)
	TaskOneSpout(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskOneSpoutClient, error)
	TaskOneBolt(ctx context.Context, opts ...grpc.CallOption) (Greeter_TaskOneBoltClient, error)
	TaskOneSink(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskOneSinkClient, error)
	TaskTwoSpout(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskTwoSpoutClient, error)
	TaskTwoBolt(ctx context.Context, opts ...grpc.CallOption) (Greeter_TaskTwoBoltClient, error)
	TaskTwoSink(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskTwoSinkClient, error)
	TaskThreeSpout(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskThreeSpoutClient, error)
	TaskThreeBolt(ctx context.Context, opts ...grpc.CallOption) (Greeter_TaskThreeBoltClient, error)
	TaskThreeSink(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskThreeSinkClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[0], "/helloworld.Greeter/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SayHelloClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayRepeat(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayRepeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[1], "/helloworld.Greeter/SayRepeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayRepeatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SayRepeatClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayRepeatClient struct {
	grpc.ClientStream
}

func (x *greeterSayRepeatClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayGossip(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayGossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[2], "/helloworld.Greeter/SayGossip", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayGossipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SayGossipClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayGossipClient struct {
	grpc.ClientStream
}

func (x *greeterSayGossipClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) IntroPut(ctx context.Context, opts ...grpc.CallOption) (Greeter_IntroPutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[3], "/helloworld.Greeter/IntroPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterIntroPutClient{stream}
	return x, nil
}

type Greeter_IntroPutClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterIntroPutClient struct {
	grpc.ClientStream
}

func (x *greeterIntroPutClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterIntroPutClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayPut(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayPutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[4], "/helloworld.Greeter/SayPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayPutClient{stream}
	return x, nil
}

type Greeter_SayPutClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayPutClient struct {
	grpc.ClientStream
}

func (x *greeterSayPutClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayPutClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) LeaderLs(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_LeaderLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[5], "/helloworld.Greeter/LeaderLs", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterLeaderLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_LeaderLsClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterLeaderLsClient struct {
	grpc.ClientStream
}

func (x *greeterLeaderLsClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) MyGet(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[6], "/helloworld.Greeter/MyGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterMyGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_MyGetClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterMyGetClient struct {
	grpc.ClientStream
}

func (x *greeterMyGetClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) FetchFile(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_FetchFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[7], "/helloworld.Greeter/FetchFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterFetchFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_FetchFileClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterFetchFileClient struct {
	grpc.ClientStream
}

func (x *greeterFetchFileClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) MyDelete(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[8], "/helloworld.Greeter/MyDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterMyDeleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_MyDeleteClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterMyDeleteClient struct {
	grpc.ClientStream
}

func (x *greeterMyDeleteClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) LocalDelete(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_LocalDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[9], "/helloworld.Greeter/LocalDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterLocalDeleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_LocalDeleteClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterLocalDeleteClient struct {
	grpc.ClientStream
}

func (x *greeterLocalDeleteClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) MyLs(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[10], "/helloworld.Greeter/MyLs", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterMyLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_MyLsClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterMyLsClient struct {
	grpc.ClientStream
}

func (x *greeterMyLsClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) PutFile(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_PutFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[11], "/helloworld.Greeter/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterPutFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_PutFileClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterPutFileClient struct {
	grpc.ClientStream
}

func (x *greeterPutFileClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) MyGetversions(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_MyGetversionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[12], "/helloworld.Greeter/MyGetversions", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterMyGetversionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_MyGetversionsClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterMyGetversionsClient struct {
	grpc.ClientStream
}

func (x *greeterMyGetversionsClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskOneSpout(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskOneSpoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[13], "/helloworld.Greeter/TaskOneSpout", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskOneSpoutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_TaskOneSpoutClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskOneSpoutClient struct {
	grpc.ClientStream
}

func (x *greeterTaskOneSpoutClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskOneBolt(ctx context.Context, opts ...grpc.CallOption) (Greeter_TaskOneBoltClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[14], "/helloworld.Greeter/TaskOneBolt", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskOneBoltClient{stream}
	return x, nil
}

type Greeter_TaskOneBoltClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskOneBoltClient struct {
	grpc.ClientStream
}

func (x *greeterTaskOneBoltClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterTaskOneBoltClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskOneSink(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskOneSinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[15], "/helloworld.Greeter/TaskOneSink", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskOneSinkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_TaskOneSinkClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskOneSinkClient struct {
	grpc.ClientStream
}

func (x *greeterTaskOneSinkClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskTwoSpout(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskTwoSpoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[16], "/helloworld.Greeter/TaskTwoSpout", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskTwoSpoutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_TaskTwoSpoutClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskTwoSpoutClient struct {
	grpc.ClientStream
}

func (x *greeterTaskTwoSpoutClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskTwoBolt(ctx context.Context, opts ...grpc.CallOption) (Greeter_TaskTwoBoltClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[17], "/helloworld.Greeter/TaskTwoBolt", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskTwoBoltClient{stream}
	return x, nil
}

type Greeter_TaskTwoBoltClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskTwoBoltClient struct {
	grpc.ClientStream
}

func (x *greeterTaskTwoBoltClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterTaskTwoBoltClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskTwoSink(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskTwoSinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[18], "/helloworld.Greeter/TaskTwoSink", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskTwoSinkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_TaskTwoSinkClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskTwoSinkClient struct {
	grpc.ClientStream
}

func (x *greeterTaskTwoSinkClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskThreeSpout(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskThreeSpoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[19], "/helloworld.Greeter/TaskThreeSpout", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskThreeSpoutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_TaskThreeSpoutClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskThreeSpoutClient struct {
	grpc.ClientStream
}

func (x *greeterTaskThreeSpoutClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskThreeBolt(ctx context.Context, opts ...grpc.CallOption) (Greeter_TaskThreeBoltClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[20], "/helloworld.Greeter/TaskThreeBolt", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskThreeBoltClient{stream}
	return x, nil
}

type Greeter_TaskThreeBoltClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskThreeBoltClient struct {
	grpc.ClientStream
}

func (x *greeterTaskThreeBoltClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterTaskThreeBoltClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) TaskThreeSink(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_TaskThreeSinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[21], "/helloworld.Greeter/TaskThreeSink", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterTaskThreeSinkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_TaskThreeSinkClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterTaskThreeSinkClient struct {
	grpc.ClientStream
}

func (x *greeterTaskThreeSinkClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayHello(*HelloRequest, Greeter_SayHelloServer) error
	SayRepeat(*HelloRequest, Greeter_SayRepeatServer) error
	SayGossip(*HelloRequest, Greeter_SayGossipServer) error
	IntroPut(Greeter_IntroPutServer) error
	SayPut(Greeter_SayPutServer) error
	LeaderLs(*HelloRequest, Greeter_LeaderLsServer) error
	MyGet(*HelloRequest, Greeter_MyGetServer) error
	FetchFile(*HelloRequest, Greeter_FetchFileServer) error
	MyDelete(*HelloRequest, Greeter_MyDeleteServer) error
	LocalDelete(*HelloRequest, Greeter_LocalDeleteServer) error
	MyLs(*HelloRequest, Greeter_MyLsServer) error
	PutFile(*HelloRequest, Greeter_PutFileServer) error
	MyGetversions(*HelloRequest, Greeter_MyGetversionsServer) error
	TaskOneSpout(*HelloRequest, Greeter_TaskOneSpoutServer) error
	TaskOneBolt(Greeter_TaskOneBoltServer) error
	TaskOneSink(*HelloRequest, Greeter_TaskOneSinkServer) error
	TaskTwoSpout(*HelloRequest, Greeter_TaskTwoSpoutServer) error
	TaskTwoBolt(Greeter_TaskTwoBoltServer) error
	TaskTwoSink(*HelloRequest, Greeter_TaskTwoSinkServer) error
	TaskThreeSpout(*HelloRequest, Greeter_TaskThreeSpoutServer) error
	TaskThreeBolt(Greeter_TaskThreeBoltServer) error
	TaskThreeSink(*HelloRequest, Greeter_TaskThreeSinkServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayHello(m, &greeterSayHelloServer{stream})
}

type Greeter_SayHelloServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_SayRepeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayRepeat(m, &greeterSayRepeatServer{stream})
}

type Greeter_SayRepeatServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterSayRepeatServer struct {
	grpc.ServerStream
}

func (x *greeterSayRepeatServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_SayGossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayGossip(m, &greeterSayGossipServer{stream})
}

type Greeter_SayGossipServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterSayGossipServer struct {
	grpc.ServerStream
}

func (x *greeterSayGossipServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_IntroPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).IntroPut(&greeterIntroPutServer{stream})
}

type Greeter_IntroPutServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterIntroPutServer struct {
	grpc.ServerStream
}

func (x *greeterIntroPutServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterIntroPutServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayPut(&greeterSayPutServer{stream})
}

type Greeter_SayPutServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayPutServer struct {
	grpc.ServerStream
}

func (x *greeterSayPutServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayPutServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_LeaderLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).LeaderLs(m, &greeterLeaderLsServer{stream})
}

type Greeter_LeaderLsServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterLeaderLsServer struct {
	grpc.ServerStream
}

func (x *greeterLeaderLsServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_MyGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).MyGet(m, &greeterMyGetServer{stream})
}

type Greeter_MyGetServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterMyGetServer struct {
	grpc.ServerStream
}

func (x *greeterMyGetServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_FetchFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).FetchFile(m, &greeterFetchFileServer{stream})
}

type Greeter_FetchFileServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterFetchFileServer struct {
	grpc.ServerStream
}

func (x *greeterFetchFileServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_MyDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).MyDelete(m, &greeterMyDeleteServer{stream})
}

type Greeter_MyDeleteServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterMyDeleteServer struct {
	grpc.ServerStream
}

func (x *greeterMyDeleteServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_LocalDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).LocalDelete(m, &greeterLocalDeleteServer{stream})
}

type Greeter_LocalDeleteServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterLocalDeleteServer struct {
	grpc.ServerStream
}

func (x *greeterLocalDeleteServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_MyLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).MyLs(m, &greeterMyLsServer{stream})
}

type Greeter_MyLsServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterMyLsServer struct {
	grpc.ServerStream
}

func (x *greeterMyLsServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).PutFile(m, &greeterPutFileServer{stream})
}

type Greeter_PutFileServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterPutFileServer struct {
	grpc.ServerStream
}

func (x *greeterPutFileServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_MyGetversions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).MyGetversions(m, &greeterMyGetversionsServer{stream})
}

type Greeter_MyGetversionsServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterMyGetversionsServer struct {
	grpc.ServerStream
}

func (x *greeterMyGetversionsServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_TaskOneSpout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).TaskOneSpout(m, &greeterTaskOneSpoutServer{stream})
}

type Greeter_TaskOneSpoutServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterTaskOneSpoutServer struct {
	grpc.ServerStream
}

func (x *greeterTaskOneSpoutServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_TaskOneBolt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).TaskOneBolt(&greeterTaskOneBoltServer{stream})
}

type Greeter_TaskOneBoltServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterTaskOneBoltServer struct {
	grpc.ServerStream
}

func (x *greeterTaskOneBoltServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterTaskOneBoltServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_TaskOneSink_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).TaskOneSink(m, &greeterTaskOneSinkServer{stream})
}

type Greeter_TaskOneSinkServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterTaskOneSinkServer struct {
	grpc.ServerStream
}

func (x *greeterTaskOneSinkServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_TaskTwoSpout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).TaskTwoSpout(m, &greeterTaskTwoSpoutServer{stream})
}

type Greeter_TaskTwoSpoutServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterTaskTwoSpoutServer struct {
	grpc.ServerStream
}

func (x *greeterTaskTwoSpoutServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_TaskTwoBolt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).TaskTwoBolt(&greeterTaskTwoBoltServer{stream})
}

type Greeter_TaskTwoBoltServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterTaskTwoBoltServer struct {
	grpc.ServerStream
}

func (x *greeterTaskTwoBoltServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterTaskTwoBoltServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_TaskTwoSink_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).TaskTwoSink(m, &greeterTaskTwoSinkServer{stream})
}

type Greeter_TaskTwoSinkServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterTaskTwoSinkServer struct {
	grpc.ServerStream
}

func (x *greeterTaskTwoSinkServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_TaskThreeSpout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).TaskThreeSpout(m, &greeterTaskThreeSpoutServer{stream})
}

type Greeter_TaskThreeSpoutServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterTaskThreeSpoutServer struct {
	grpc.ServerStream
}

func (x *greeterTaskThreeSpoutServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_TaskThreeBolt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).TaskThreeBolt(&greeterTaskThreeBoltServer{stream})
}

type Greeter_TaskThreeBoltServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterTaskThreeBoltServer struct {
	grpc.ServerStream
}

func (x *greeterTaskThreeBoltServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterTaskThreeBoltServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_TaskThreeSink_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).TaskThreeSink(m, &greeterTaskThreeSinkServer{stream})
}

type Greeter_TaskThreeSinkServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterTaskThreeSinkServer struct {
	grpc.ServerStream
}

func (x *greeterTaskThreeSinkServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _Greeter_SayHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayRepeat",
			Handler:       _Greeter_SayRepeat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayGossip",
			Handler:       _Greeter_SayGossip_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IntroPut",
			Handler:       _Greeter_IntroPut_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SayPut",
			Handler:       _Greeter_SayPut_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LeaderLs",
			Handler:       _Greeter_LeaderLs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MyGet",
			Handler:       _Greeter_MyGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFile",
			Handler:       _Greeter_FetchFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MyDelete",
			Handler:       _Greeter_MyDelete_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LocalDelete",
			Handler:       _Greeter_LocalDelete_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MyLs",
			Handler:       _Greeter_MyLs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFile",
			Handler:       _Greeter_PutFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MyGetversions",
			Handler:       _Greeter_MyGetversions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskOneSpout",
			Handler:       _Greeter_TaskOneSpout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskOneBolt",
			Handler:       _Greeter_TaskOneBolt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TaskOneSink",
			Handler:       _Greeter_TaskOneSink_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskTwoSpout",
			Handler:       _Greeter_TaskTwoSpout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskTwoBolt",
			Handler:       _Greeter_TaskTwoBolt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TaskTwoSink",
			Handler:       _Greeter_TaskTwoSink_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskThreeSpout",
			Handler:       _Greeter_TaskThreeSpout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskThreeBolt",
			Handler:       _Greeter_TaskThreeBolt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TaskThreeSink",
			Handler:       _Greeter_TaskThreeSink_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}
